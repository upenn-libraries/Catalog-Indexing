<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.


 For more information, on how to customize this file, please see
 https://solr.apache.org/guide/solr/latest/indexing-guide/schema-elements.html

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
-->

<schema name="penn-libraries-catalog" version="1.6">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
     version="x.y" is Solr's version number for the schema syntax and
     semantics.  It should not normally be changed by applications.

     1.0: multiValued attribute did not exist, all fields are multiValued
          by nature
     1.1: multiValued attribute introduced, false by default
     1.2: omitTermFreqAndPositions attribute introduced, true by default
          except for text fields.
     1.3: removed optional field compress feature
     1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
          behavior when a single string produces multiple tokens.  Defaults
          to off for version >= 1.4
     1.5: omitNorms defaults to true for primitive field types
          (int, float, boolean, string...)
     1.6: useDocValuesAsStored defaults to true.
  -->

  <!-- Valid attributes for fields:
   name: mandatory - the name for the field
   type: mandatory - the name of a field type from the
     fieldTypes section
   indexed: true if this field should be indexed (searchable or sortable)
   stored: true if this field should be retrievable
   docValues: true if this field should have doc values. Doc Values is
     recommended (required, if you are using *Point fields) for faceting,
     grouping, sorting and function queries. Doc Values will make the index
     faster to load, more NRT-friendly and more memory-efficient.
     They are currently only supported by StrField, UUIDField, all
     *PointFields, and depending on the field type, they might require
     the field to be single-valued, be required or have a default value
     (check the documentation of the field type you're interested in for
     more information)
   multiValued: true if this field may contain multiple values per document
   omitNorms: (expert) set to true to omit the norms associated with
     this field (this disables length normalization and index-time
     boosting for the field, and saves some memory).  Only full-text
     fields or fields that need an index-time boost need norms.
     Norms are omitted for primitive (non-analyzed) types by default.
   termVectors: [false] set to true to store the term vector for a
     given field.
     When using MoreLikeThis, fields used for similarity should be
     stored for best performance.
   termPositions: Store position information with the term vector.
     This will increase storage costs.
   termOffsets: Store offset information with the term vector. This
     will increase storage costs.
   required: The field is required.  It will throw an error if the
     value does not exist
   default: a value that should be used if no value is specified
     when adding a document.
  -->

  <!-- field names should consist of alphanumeric or underscore characters only and
    not start with a digit.  This is not currently strictly enforced,
    but other field names will not have first class support from all components
    and back compatibility is not guaranteed.  Names with both leading and
    trailing underscores (e.g. _version_) are reserved.
  -->

  <!-- In this _default configset, only four fields are pre-declared:
       id, _version_, and _text_ and _root_. All other fields will be type guessed and added via the
       "add-unknown-fields-to-the-schema" update request processor chain declared in solrconfig.xml.

       Note that many dynamic fields are also defined - you can use them to specify a
       field's type via field naming conventions - see below.

       WARNING: The _text_ catch-all field will significantly increase your index size.
       If you don't need it, consider removing it and the corresponding copyField directive.
  -->

  <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" />
  <field name="call_number" type="string" indexed="true" stored="true" required="false" multiValued="true" />
  <field name="mmsid" type="mmsid" indexed="true" stored="false" required="false" multiValued="false" />
  <!-- docValues are enabled by default for long type so we don't need to index the version field  -->
  <field name="_version_" type="plong" indexed="false" stored="false"/>

  <!-- TODO: used as a unique key; Solr will parse out exclamation point and use prefix for determining the node where doc is indexed -->
<!--  <field name="grouped_id" type="string" indexed="true" stored="true" required="true" multiValued="false" />-->

  <!-- TODO: cluster_id = an id shared by a set of documents, used for collapsing/expanding -->
<!--  <field name="cluster_id" type="string" indexed="true" stored="true" required="false" multiValued="false" docValues="true" />-->



  <!-- Field to use to determine and enforce document uniqueness.
  Unless this field is marked with required="false", it will be a required field
-->
  <uniqueKey>id</uniqueKey>

  <!-- If you don't use child/nested documents, then you should remove the next two fields:  -->
  <!-- for nested documents (minimal; points to root document) -->
<!--  <field name="_root_" type="string" indexed="true" stored="false" docValues="false" />-->
  <!-- for nested documents (relationship tracking) -->
<!--  <field name="_nest_path_" type="_nest_path_" /><fieldType name="_nest_path_" class="solr.NestPathField" />-->

<!--  <field name="_text_" type="text_general" indexed="true" stored="false" multiValued="true"/>-->

  <!-- This can be enabled, in case the client does not know what fields may be searched. It isn't enabled by default
       because it's very expensive to index everything twice. -->
  <!-- <copyField source="*" dest="_text_"/> -->

  <!-- Dynamic field definitions allow using convention over configuration
     for fields via the specification of patterns to match field names.
     EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
     RESTRICTION: the glob-like pattern in the name attribute must have a "*"
     only at the start or the end.  -->

  <dynamicField name="*_i"   type="pint"     indexed="true"  stored="true"/>
  <dynamicField name="*_is"  type="pints"    indexed="true"  stored="true"/>
  <dynamicField name="*_s"   type="string"   indexed="true"  stored="true"/>
  <dynamicField name="*_ss"  type="strings"  indexed="true"  stored="true"/>
  <dynamicField name="*_ssi" type="string"   indexed="true"  stored="true"  multiValued="false"/>
  <dynamicField name="*_l"   type="plong"    indexed="true"  stored="true"/>
  <dynamicField name="*_ls"  type="plongs"   indexed="true"  stored="true"/>
  <dynamicField name="*_b"   type="boolean"  indexed="true"  stored="true"/>
  <dynamicField name="*_bs"  type="booleans" indexed="true"  stored="true"/>
  <dynamicField name="*_f"   type="pfloat"   indexed="true"  stored="true"/>
  <dynamicField name="*_fs"  type="pfloats"  indexed="true"  stored="true"/>
  <dynamicField name="*_d"   type="pdouble"  indexed="true"  stored="true"/>
  <dynamicField name="*_ds"  type="pdoubles" indexed="true"  stored="true"/>
  <dynamicField name="*_dt"  type="pdate"    indexed="true"  stored="true"/>
  <dynamicField name="*_dts" type="pdates"   indexed="true"  stored="true"/>
  <dynamicField name="*_t"   type="text_general" indexed="true" stored="true" multiValued="false"/>
  <dynamicField name="*_txt" type="text_general" indexed="true" stored="true"/>

  <dynamicField name="random_*" type="random"/>
  <dynamicField name="ignored_*" type="ignored"/>

  <!-- Type used for data-driven schema, to add a string copy for each text field -->
  <dynamicField name="*_str" type="strings" stored="false" docValues="true" indexed="false" useDocValuesAsStored="false"/>

  <dynamicField name="*_p"  type="location" indexed="true" stored="true"/>
  <dynamicField name="*_srpt"  type="location_rpt" indexed="true" stored="true"/>

  <!-- payloaded dynamic fields -->
  <dynamicField name="*_dpf" type="delimited_payloads_float" indexed="true"  stored="true"/>
  <dynamicField name="*_dpi" type="delimited_payloads_int" indexed="true"  stored="true"/>
  <dynamicField name="*_dps" type="delimited_payloads_string" indexed="true"  stored="true"/>

  <dynamicField name="attr_*" type="text_general" indexed="true" stored="true" multiValued="true"/>

  <!-- copyField commands copy one field to another at the time a document
     is added to the index.  It's used either to index the same field differently,
     or to add multiple fields to the same field for easier/faster searching. -->

  <!-- mmsid field is used for matching common query terms to exact records -->
  <copyField source="id" dest="mmsid" />

  <!-- language search field -->
  <copyField source="language_facet" dest="language_search" />

  <!-- title fields are most ripe for exact matches -->
  <copyField source="title_search" dest="title_anchored_search" />
  <copyField source="title_aux_search" dest="title_aux_anchored_search" />
  <copyField source="journal_title_search" dest="journal_title_anchored_search" />
  <copyField source="journal_title_aux_search" dest="journal_title_aux_anchored_search" />
  <copyField source="series_search" dest="series_anchored_search" />

  <!-- all search values can benefit from representation in an unstemmed field -->
  <copyField source="*_search" dest="*_unstem_search" />

  <!-- field type definitions. The "name" attribute is
     just a label to be used by field definitions.  The "class"
     attribute and any other attributes determine the real
     behavior of the fieldType.
       Class names starting with "solr" refer to java classes in a
     standard package such as org.apache.solr.analysis
  -->

  <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
       currently supported on types that are sorted internally as strings
       and on numeric types.
     This includes "string", "boolean", "pint", "pfloat", "plong", "pdate", "pdouble".
     - If sortMissingLast="true", then a sort on this field will cause documents
       without the field to come after documents with the field,
       regardless of the requested sort order (asc or desc).
     - If sortMissingFirst="true", then a sort on this field will cause documents
       without the field to come before documents with the field,
       regardless of the requested sort order.
     - If sortMissingLast="false" and sortMissingFirst="false" (the default),
       then default lucene sorting will be used which places docs without the
       field first in an ascending sort and last in a descending sort.
  -->

  <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
  <fieldType name="string" class="solr.StrField" sortMissingLast="true" docValues="true" />
  <fieldType name="strings" class="solr.StrField" sortMissingLast="true" multiValued="true" docValues="true" />

  <!-- boolean type: "true" or "false" -->
  <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
  <fieldType name="booleans" class="solr.BoolField" sortMissingLast="true" multiValued="true"/>

  <!--
    Numeric field types that index values using KD-trees.
    Point fields don't support FieldCache, so they must have docValues="true" if needed for sorting, faceting, functions, etc.
  -->
  <fieldType name="pint" class="solr.IntPointField" docValues="true"/>
  <fieldType name="pfloat" class="solr.FloatPointField" docValues="true"/>
  <fieldType name="plong" class="solr.LongPointField" docValues="true"/>
  <fieldType name="pdouble" class="solr.DoublePointField" docValues="true"/>

  <fieldType name="pints" class="solr.IntPointField" docValues="true" multiValued="true"/>
  <fieldType name="pfloats" class="solr.FloatPointField" docValues="true" multiValued="true"/>
  <fieldType name="plongs" class="solr.LongPointField" docValues="true" multiValued="true"/>
  <fieldType name="pdoubles" class="solr.DoublePointField" docValues="true" multiValued="true"/>
  <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

  <!-- since fields of this type are by default not stored or indexed,
     any data added to them will be ignored outright.  -->
  <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

  <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
       is a more restricted form of the canonical representation of dateTime
       http://www.w3.org/TR/xmlschema-2/#dateTime
       The trailing "Z" designates UTC time and is mandatory.
       Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
       All other components are mandatory.

       Expressions can also be used to denote calculations that should be
       performed relative to "NOW" to determine the value, ie...

             NOW/HOUR
                ... Round to the start of the current hour
             NOW-1DAY
                ... Exactly 1 day prior to now
             NOW/DAY+6MONTHS+3DAYS
                ... 6 months and 3 days in the future from the start of
                    the current day

    -->
  <!-- KD-tree versions of date fields -->
  <fieldType name="pdate" class="solr.DatePointField" docValues="true" sortMissingLast="true"/>
  <fieldType name="pdates" class="solr.DatePointField" docValues="true" multiValued="true"/>

  <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
  <fieldType name="binary" class="solr.BinaryField"/>

  <!--
  RankFields can be used to store scoring factors to improve document ranking. They should be used
  in combination with RankQParserPlugin.
  (experimental)
  -->
  <fieldType name="rank" class="solr.RankField"/>

  <!-- solr.TextField allows the specification of custom text analyzers
       specified as a tokenizer and a list of token filters. Different
       analyzers may be specified for indexing and querying.

       The optional positionIncrementGap puts space between multiple fields of
       this type on the same document, with the purpose of preventing false phrase
       matching across fields.

       For more info on customizing your analyzer chain, please see
       https://solr.apache.org/guide/solr/latest/indexing-guide/document-analysis.html#using-analyzers-tokenizers-and-filters
   -->

  <!-- One can also specify an existing Analyzer class that has a
       default constructor via the class attribute on the analyzer element.
       Example:
  <fieldType name="text_greek" class="solr.TextField">
    <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
  </fieldType>
  -->

  <!--  isxn type from Franklin config -->
  <!-- TODO: is this suitable for display? -->
  <fieldtype name="isxn" class="solr.TextField">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory"/>
      <filter class="solr.PatternReplaceFilterFactory" pattern="\(.*\)" replacement="" replace="all"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.PatternReplaceFilterFactory" pattern="[^0-9x]" replacement="" replace="all"/>
      <filter class="solr.LengthFilterFactory" min="8" max="15"/>
    </analyzer>
  </fieldtype>
  <dynamicField name="*_isxn" type="isxn" indexed="true" stored="true" multiValued="true" />

  <!-- Important Indexer types -->
  <dynamicField name="*_facet" type="string" indexed="true" stored="false" multiValued="true" />
  <dynamicField name="*_search" type="text" indexed="true" stored="false" multiValued="true" />
  <dynamicField name="*_anchored_search" type="text_anchored" indexed="true" stored="false" multiValued="true" />
  <dynamicField name="*_unstem_search" type="text_unstem" indexed="true" stored="false" multiValued="true" />
  <dynamicField name="*_date_sort" type="pdate" indexed="true" stored="false" multiValued="false" />
  <dynamicField name="*_sort" type="alphaNumSort" indexed="true" stored="false" multiValued="false" />
  <dynamicField name="*_callnum_search" type="callnum_ws" indexed="true" stored="false" multiValued="true" />

  <!-- TODO: XML type - CJK handling appears here... -->
<!--  <fieldtype name="xml" class="solr.TextField" sortMissingLast="true">-->
<!--    <analyzer type="query">-->
<!--      <charFilter class="solr.ICUNormalizer2CharFilterFactory" name="nfkc"/> &lt;!&ndash; no case folding initially &ndash;&gt;-->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Traditional-Simplified"/>-->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Katakana-Hiragana" assumeExternalUnicodeNormalization="true"/>-->
<!--      <tokenizer class="solr.ICUTokenizerFactory" rulefiles="Latn:Latin-dont-break-on-hyphens.rbbi,Zyyy:Latin-dont-break-on-hyphens.rbbi"/>-->
<!--      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>-->
<!--      <filter class="solr.SynonymGraphFilterFactory" synonyms="protwords.txt" ignoreCase="true" expand="true"/>-->
<!--      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" stemEnglishPossessive="0" protected="protwords.txt"/>-->
<!--      <filter class="solr.ICUFoldingFilterFactory"/>-->
<!--    </analyzer>-->
<!--    <analyzer type="index">-->
<!--      <charFilter class="solr.HTMLStripCharFilterFactory"/>-->
<!--      <charFilter class="solr.ICUNormalizer2CharFilterFactory" name="nfkc"/> &lt;!&ndash; no case folding initially &ndash;&gt;-->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Traditional-Simplified"/>-->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Katakana-Hiragana" assumeExternalUnicodeNormalization="true"/>-->
<!--      <tokenizer class="solr.ICUTokenizerFactory" rulefiles="Latn:Latin-dont-break-on-hyphens.rbbi,Zyyy:Latin-dont-break-on-hyphens.rbbi"/>-->
<!--      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>-->
<!--      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
<!--      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" stemEnglishPossessive="0" protected="protwords.txt"/>-->
<!--      <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>-->
<!--      <filter class="solr.ICUFoldingFilterFactory"/>-->
<!--      <filter class="solr.FlattenGraphFilterFactory"/>-->
<!--      <filter class="solr.PositionLengthOrderTokenFilterFactory" indexLookahead="true"/>-->
<!--    </analyzer>-->
<!--  </fieldtype>-->

  <!-- SUL's call number search field type - 100% stock Solr. Thanks SUL. -->
  <fieldType name="callnum_ws" class="solr.TextField" omitNorms="true" positionIncrementGap="100" autoGeneratePhraseQueries="true">
    <analyzer type="index">
      <!-- LC: no space between class letters and digits; normalize to " ." before first cutter, no leading space -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^ *([A-Za-z]{1,3}) ?(\d{1,4}(\.\d+)?) ?\.?([A-Za-z]\d+)" replacement="$1$2 .$4"/>
      <!-- LC: add space between first cutter letter and its digits to allow matching on first cutter letter only -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^([A-Za-z]{1,3}\d{1,4}(\.\d+)? \.([A-Za-z]))(\d+)" replacement="$1 $4"/>
      <!-- prepend yyyy to string so searches can be left anchored -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^\s*(\S{1})" replacement="yyyy$1"/>
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
    <!-- Note that the query string could be a partial call number, so we can't combine all patterns -->
    <analyzer type="query">
      <!-- LC: no space between class letters and digits, no leading space -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^ *([A-Za-z]{1,3}) *(\d{1,4})" replacement="$1$2" />
      <!-- LC: normalize to " ." before first cutter or first letter of cutter (could be preceded by " ." "." " " or nothing) -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^([A-Za-z]{1,3}\d{1,4}(\.\d+)?) *\.?([A-Za-z](\d+)?)" replacement="$1 .$3" />
      <!-- LC: add space between first cutter letter and its digits to allow matching on first cutter letter only -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^([A-Za-z]{1,3}\d{1,4}(\.\d+)? \.([A-Za-z]))([^ ])" replacement="$1 $4"/>
      <!-- prepend yyyy to string so searches can be left anchored -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^\s*(\S{1})" replacement="yyyy$1"/>
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>

  <!-- MK's attempt at a field for MARCXML - it's the example text_cjk type with htmlStrip on the indexing side and synonym filter on the query side -->
  <dynamicField name="*_marcxml" type="marcxml" indexed="true" stored="true" multiValued="false" />
  <fieldType name="marcxml" class="solr.TextField" sortMissingLast="true">
    <analyzer type="query">
      <tokenizer name="standard"/>
      <filter name="CJKWidth"/>
      <filter name="lowercase"/>
      <filter name="CJKBigram"/>
      <!-- see text_general notes for why this synonymGraph filter can't be used -->
<!--      <filter name="synonymGraph" synonyms="synonyms.txt"/>-->
<!--      <filter name="flattenGraph"/>-->
    </analyzer>
    <analyzer type="index">
      <charFilter name="htmlStrip" />
      <tokenizer name="standard"/>
      <filter name="CJKWidth"/>
      <filter name="lowercase"/>
      <filter name="CJKBigram"/>
    </analyzer>
  </fieldType>

  <!-- "search" type from Franklin config - CJK handling here also -->
  <fieldType name="search_franklin" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="query">
      <charFilter class="solr.ICUNormalizer2CharFilterFactory" form="nfkc"/> <!-- no case folding initially -->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Traditional-Simplified"/>-->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Katakana-Hiragana" assumeExternalUnicodeNormalization="true"/>-->
      <tokenizer class="solr.ICUTokenizerFactory" rulefiles="Latn:Latin-dont-break-on-hyphens.rbbi,Zyyy:Latin-dont-break-on-hyphens.rbbi"/>
<!--      <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>-->
<!--      <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>-->
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
<!--      <filter class="solr.SynonymGraphFilterFactory" synonyms="protwords.txt" ignoreCase="true" expand="true"/>-->
<!--      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" stemEnglishPossessive="1" protected="protwords.txt"/>-->
      <filter class="solr.ICUFoldingFilterFactory"/>
    </analyzer>
    <analyzer type="index">
      <charFilter class="solr.ICUNormalizer2CharFilterFactory" form="nfkc"/> <!-- no case folding initially -->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Traditional-Simplified"/>-->
<!--      <charFilter class="solr.ICUTransformCharFilterFactory" id="Katakana-Hiragana" assumeExternalUnicodeNormalization="true"/>-->
      <tokenizer class="solr.ICUTokenizerFactory" rulefiles="Latn:Latin-dont-break-on-hyphens.rbbi,Zyyy:Latin-dont-break-on-hyphens.rbbi"/>
<!--      <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>-->
<!--      <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>-->
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
<!--      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
<!--      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" stemEnglishPossessive="0" protected="protwords.txt"/>-->
      <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      <filter class="solr.ICUFoldingFilterFactory"/>
<!--      <filter class="solr.FlattenGraphFilterFactory"/>-->
      <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
<!--      <filter class="solr.PositionLengthOrderTokenFilterFactory" indexLookahead="true"/>-->
    </analyzer>
  </fieldType>

  <!-- TODO: "ssort" field from Franklin config -->
<!--  <fieldType name="ssort" class="solr.TextField" positionIncrementGap="0" omitNorms="true" sortMissingLast="true">-->
<!--    <analyzer>-->
<!--      <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>-->
<!--      <tokenizer class="solr.KeywordTokenizerFactory"/>-->
<!--      <filter class="solr.ICUFoldingFilterFactory"/>-->
<!--      <filter class="solr.PatternReplaceFilterFactory" pattern=" &amp; " replacement=" and "/>-->
<!--      <filter class="solr.PatternReplaceFilterFactory" pattern="(\p{IsAlphabetic})['’](\p{IsAlphabetic})" replacement="$1$2"/>-->
<!--      <filter class="solr.PatternReplaceFilterFactory" pattern="[^\p{IsAlphabetic}\p{Digit}]+" replacement=" "/>-->
<!--      <filter class="solr.TrimFilterFactory"/>-->
<!--      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="0" splitOnNumerics="0" preserveOriginal="0" stemEnglishPossessive="0" types="wdftypes-headingSort.txt"/>-->
<!--      <filter class="solr.FlattenGraphFilterFactory"/>-->
<!--    </analyzer>-->
<!--  </fieldType>-->


  <!-- A text field that only splits on whitespace for exact matching of words -->
  <dynamicField name="*_ws" type="text_ws"  indexed="true"  stored="true"/>
  <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer name="whitespace"/>
    </analyzer>
  </fieldType>

  <!-- A general text field that has reasonable, generic
       cross-language defaults: it tokenizes with StandardTokenizer,
       removes stop words from case-insensitive "stopwords.txt"
       (empty by default), and down cases.  At query time only, it
       also applies synonyms.
  -->
<!-- TODO: can't use SPI lookups with some of these: see https://issues.apache.org/jira/browse/SOLR-16203 -->
  <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100" multiValued="true">
    <analyzer type="index">
      <tokenizer name="standard"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
      <!-- in this example, we will only use synonyms at query time
      <filter name="solr.SynonymGraphFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
      <filter name="flattenGraph"/>
      -->
      <filter name="lowercase"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer name="standard"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
      <!-- including this synonymGraph filter causes all fields of this type to be silently ignored during searches. it
           is not clear why. even including a flattenGraph filter does not allow this to be used as intended -->
      <!--      <filter name="synonymGraph" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>-->
      <filter name="lowercase"/>
    </analyzer>
  </fieldType>

  <!-- SUL's default text/search type. we'll probably want to add CJK handling in here eventually, which would require
       not using the SnowballPorterFilterFactory - or maybe a cjk field type is warranted? :shrug_emoji:
       see text_anchored field definition for inline commentary -->
  <fieldtype name="text" class="solr.TextField" positionIncrementGap="10000" autoGeneratePhraseQueries="true">
    <analyzer type="index">
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.ICUFoldingFilterFactory"/>
      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      <filter class="solr.WordDelimiterGraphFilterFactory"
              splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
              splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
              catenateAll="0" preserveOriginal="0" stemEnglishPossessive="1" />
      <filter class="solr.FlattenGraphFilterFactory"/>
      <filter class="solr.SnowballPorterFilterFactory" language="English"/>
      <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
    </analyzer>
    <analyzer type="query">
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.ICUFoldingFilterFactory"/>
      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      <filter class="solr.WordDelimiterGraphFilterFactory"
              splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
              splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
              catenateAll="0" preserveOriginal="0" stemEnglishPossessive="1" />
      <filter class="solr.SnowballPorterFilterFactory" language="English"/>
      <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
    </analyzer>
  </fieldtype>

  <!-- field used for searching over identifier with best bets synonyms enabled at query time -->
  <fieldtype name="mmsid" class="solr.TextField" autoGeneratePhraseQueries="false">
    <analyzer type="index">
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <tokenizer class="solr.KeywordTokenizerFactory" />
    </analyzer>
    <analyzer type="query">
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.SynonymGraphFilterFactory" synonyms="best_bet_synonyms.txt" ignoreCase="true" expand="true"/>
      <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
    </analyzer>
  </fieldtype>

  <!-- an "unstemmed" text field type. this should mirror our default search field type but without the stemming filter
       see: https://solr.apache.org/guide/solr/latest/indexing-guide/filters.html#stemming
       Also, see notes in text_anchored field definition about chaining graph filters
  -->
  <fieldType name="text_unstem" class="solr.TextField" positionIncrementGap="10000" autoGeneratePhraseQueries="true">
    <analyzer type="index">
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.ICUFoldingFilterFactory"/>
      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      <filter class="solr.WordDelimiterGraphFilterFactory"
              splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
              splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
              catenateAll="0" preserveOriginal="0" stemEnglishPossessive="0" />
      <filter class="solr.FlattenGraphFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.ICUFoldingFilterFactory"/>
      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      <filter class="solr.WordDelimiterGraphFilterFactory"
              splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
              splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
              catenateAll="0" preserveOriginal="0" stemEnglishPossessive="0" />
    </analyzer>
  </fieldType>

  <!-- Text field for exact matches, inspired by SUL's text_anchored. No stemming is performed.
       Stored tokens in this field have starting and ending tokens "labeled" with "aaaaaa" (start) and "zzzzzz" chars.
       Doing the same to the query content allows us to match start and finish tokens
       Example:
       Indexed: "Achieving our Country"
       Query: "Achieving Our Country" good match
       Query: "Not achieving our country today" not a good match
       It makes sense to think of this as left and right "anchored" rather than exact..
        -->
  <fieldType name="text_anchored" class="solr.TextField" positionIncrementGap="10000" autoGeneratePhraseQueries="true">
    <analyzer type="index">
      <!-- charFilters alter the stream of text character-by-character -->
      <!-- remove standalone punctuation -->
      <charFilter class="solr.PatternReplaceCharFilterFactory"
                  pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <!-- add in beginning and ending anchors and remove trailing chars
           who knows what this regex is doing, but SUL notes:
           "watch out for query time whitespace separated chars that will be processed as their own token stream, e.g. in 'felines : warm and fuzzy'"
           -->
      <charFilter class="solr.PatternReplaceCharFilterFactory"
                  pattern="^\s*(.*[\S&amp;&amp;[^\.\,:;/=&lt;&gt;\(\)\[\]\&amp;\|]])[\s\.\,:;/=&lt;&gt;\(\)\[\]\&amp;\|]*$"
                  replacement="aaaaaa$1zzzzzz"/>
      <!-- create tokens based on whitespace -->
      <tokenizer class="solr.WhitespaceTokenizerFactory" />

      <!-- NFKC, case folding, diacritics removed -->
      <filter class="solr.ICUFoldingFilterFactory"/>

      <!-- handle synonym files, with the special leading and trailing anchors considered. this seems hacky -->
      <!-- SUL pivots to a graph here, but then uses the WordDelimiterGraphFilterFactory, which claims in the Solr docs
           to not handle a graph as input. See:
              https://solr.apache.org/guide/solr/latest/indexing-guide/filters.html#word-delimiter-graph-filter -->
      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
<!--      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms_both_anchors.txt" ignoreCase="true" expand="true"/>-->
<!--      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms_left_anchor.txt" ignoreCase="true" expand="true"/>-->
<!--      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms_right_anchor.txt" ignoreCase="true" expand="true"/>-->
      <!-- PUL handles CJK here, SUL has a separate cjk_anchored field type... -->
      <!-- in our case, we will probably want to handle CJK here (as well as in text_general, but let's not worry
           about it for now... -->

      <!-- chaining graph filter can lead to "unexpected" search results. see:
            https://www.elastic.co/guide/en/elasticsearch/reference/current/token-graphs.html
           I can't find much discussion about this, but it porbably clobbers the position information about each token.
           Do we care about this? Our searches don't seem to depend on positional information. For now, let's do what
           our peers do and ignore this warning. -->

      <!-- Split tokens based on some grammatical things, e.g., hyphenation, caseChange, etc. -->
      <filter class="solr.WordDelimiterGraphFilterFactory"
              splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
              splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
              catenateAll="0" preserveOriginal="0" stemEnglishPossessive="1" />
      <!-- one must always flatten a graph at the end of an indexing analyzer -->
      <filter class="solr.FlattenGraphFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <charFilter class="solr.PatternReplaceCharFilterFactory"
                  pattern="\s+(\p{Punct}+)\s+" replacement=" " />
      <charFilter class="solr.PatternReplaceCharFilterFactory"
                  pattern="^\s*(.*[\S&amp;&amp;[^\.\,:;/=&lt;&gt;\(\)\[\]\&amp;\|]])[\s\.\,:;/=&lt;&gt;\(\)\[\]\&amp;\|]*$"
                  replacement="aaaaaa$1zzzzzz"/>
      <tokenizer class="solr.WhitespaceTokenizerFactory" />
      <filter class="solr.ICUFoldingFilterFactory"/>
      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false" />
      <filter class="solr.WordDelimiterGraphFilterFactory"
              splitOnCaseChange="1" generateWordParts="1" catenateWords="1"
              splitOnNumerics="0" generateNumberParts="1" catenateNumbers="1"
              catenateAll="0" preserveOriginal="0" stemEnglishPossessive="1" />
    </analyzer>
  </fieldType>

  <!-- SortableTextField generally functions exactly like TextField,
       except that it supports, and by default uses, docValues for sorting (or faceting)
       on the first 1024 characters of the original field values (which is configurable).

       This makes it a bit more useful then TextField in many situations, but the trade-off
       is that it takes up more space on disk; which is why it's not used in place of TextField
       for every fieldType in this _default schema.
  -->
  <dynamicField name="*_t_sort" type="text_gen_sort" indexed="true" stored="true" multiValued="false"/>
  <dynamicField name="*_txt_sort" type="text_gen_sort" indexed="true" stored="true"/>
  <fieldType name="text_gen_sort" class="solr.SortableTextField" positionIncrementGap="100" multiValued="true"
             sortMissingLast="true">
    <analyzer type="index">
      <tokenizer name="standard"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
      <filter name="lowercase"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer name="standard"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
      <filter name="synonymGraph" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      <filter name="lowercase"/>
    </analyzer>
  </fieldType>

  <!-- A text field that uses the keyword tokenizer to support case insensitive alphanumeric sorting
   Since we need to analyze our inputs for lowercasing and pattern replacement, we must use the TextField class.
   For documentation on sorting text fields, see:
   https://solr.apache.org/guide/solr/latest/query-guide/common-query-parameters.html#sort-parameter -->
  <fieldType name="alphaNumSort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
    <analyzer type="index">
      <!-- keyword tokenizer preserves input string as a single token -->
      <tokenizer name="keyword" />
      <filter name="lowercase" />
      <!-- remove non alphanumerical characters -->
      <filter name="patternReplace" pattern="([^a-z0-9])" replacement="" replace="all" />
    </analyzer>
    <analyzer type="query">
      <tokenizer name="keyword" />
      <filter name="lowercase" />
      <filter name="patternReplace" pattern="([^a-z0-9])" replacement="" replace="all" />
    </analyzer>
  </fieldType>

  <!-- A text field with defaults appropriate for English: it tokenizes with StandardTokenizer,
       removes English stop words (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
       finally applies Porter's stemming.  The query time analyzer also applies synonyms from synonyms.txt. -->
  <dynamicField name="*_txt_en" type="text_en"  indexed="true"  stored="true"/>
  <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer name="standard"/>
      <!-- in this example, we will only use synonyms at query time
      <filter name="synonymGraph" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
      <filter name="flattenGraph"/>
      -->
      <!-- Case insensitive stop word removal.
      -->
      <filter name="stop"
              ignoreCase="true"
              words="lang/stopwords_en.txt"
      />
      <filter name="lowercase"/>
      <filter name="englishPossessive"/>
      <filter name="keywordMarker" protected="protwords.txt"/>
      <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
      <filter name="englishMinimalStem"/>
      -->
      <filter name="porterStem"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer name="standard"/>
      <filter name="synonymGraph" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
      <filter name="stop"
              ignoreCase="true"
              words="lang/stopwords_en.txt"
      />
      <filter name="lowercase"/>
      <filter name="englishPossessive"/>
      <filter name="keywordMarker" protected="protwords.txt"/>
      <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
      <filter name="englishMinimalStem"/>
      -->
      <filter name="porterStem"/>
    </analyzer>
  </fieldType>

  <!-- A text field with defaults appropriate for English, plus
       aggressive word-splitting and autophrase features enabled.
       This field is just like text_en, except it adds
       WordDelimiterGraphFilter to enable splitting and matching of
       words on case-change, alpha numeric boundaries, and
       non-alphanumeric chars.  This means certain compound word
       cases will work, for example query "wi fi" will match
       document "WiFi" or "wi-fi".
  -->
  <dynamicField name="*_txt_en_split" type="text_en_splitting"  indexed="true"  stored="true"/>
  <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
    <analyzer type="index">
      <tokenizer name="whitespace"/>
      <!-- in this example, we will only use synonyms at query time
      <filter name="synonymGraph" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
      -->
      <!-- Case insensitive stop word removal.
      -->
      <filter name="stop"
              ignoreCase="true"
              words="lang/stopwords_en.txt"
      />
      <filter name="wordDelimiterGraph" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
      <filter name="lowercase"/>
      <filter name="keywordMarker" protected="protwords.txt"/>
      <filter name="porterStem"/>
      <filter name="flattenGraph" />
    </analyzer>
    <analyzer type="query">
      <tokenizer name="whitespace"/>
      <filter name="synonymGraph" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
      <filter name="stop"
              ignoreCase="true"
              words="lang/stopwords_en.txt"
      />
      <filter name="wordDelimiterGraph" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
      <filter name="lowercase"/>
      <filter name="keywordMarker" protected="protwords.txt"/>
      <filter name="porterStem"/>
    </analyzer>
  </fieldType>

  <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
       but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
  <dynamicField name="*_txt_en_split_tight" type="text_en_splitting_tight"  indexed="true"  stored="true"/>
  <fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
    <analyzer type="index">
      <tokenizer name="whitespace"/>
      <filter name="synonymGraph" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      <filter name="stop" ignoreCase="true" words="lang/stopwords_en.txt"/>
      <filter name="wordDelimiterGraph" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
      <filter name="lowercase"/>
      <filter name="keywordMarker" protected="protwords.txt"/>
      <filter name="englishMinimalStem"/>
      <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
           possible with WordDelimiterGraphFilter in conjuncton with stemming. -->
      <filter name="removeDuplicates"/>
      <filter name="flattenGraph" />
    </analyzer>
    <analyzer type="query">
      <tokenizer name="whitespace"/>
      <filter name="synonymGraph" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
      <filter name="stop" ignoreCase="true" words="lang/stopwords_en.txt"/>
      <filter name="wordDelimiterGraph" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
      <filter name="lowercase"/>
      <filter name="keywordMarker" protected="protwords.txt"/>
      <filter name="englishMinimalStem"/>
      <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
           possible with WordDelimiterGraphFilter in conjuncton with stemming. -->
      <filter name="removeDuplicates"/>
    </analyzer>
  </fieldType>

  <!-- Just like text_general except it reverses the characters of
       each token, to enable more efficient leading wildcard queries.
  -->
  <dynamicField name="*_txt_rev" type="text_general_rev"  indexed="true"  stored="true"/>
  <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer name="standard"/>
      <filter name="stop" ignoreCase="true" words="stopwords.txt" />
      <filter name="lowercase"/>
      <filter name="reversedWildcard" withOriginal="true"
              maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer name="standard"/>
      <filter name="synonymGraph" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
      <filter name="stop" ignoreCase="true" words="stopwords.txt" />
      <filter name="lowercase"/>
    </analyzer>
  </fieldType>

  <dynamicField name="*_phon_en" type="phonetic_en"  indexed="true"  stored="true"/>
  <fieldType name="phonetic_en" stored="false" indexed="true" class="solr.TextField" >
    <analyzer>
      <tokenizer name="standard"/>
      <filter name="doubleMetaphone" inject="false"/>
    </analyzer>
  </fieldType>

  <!-- lowercases the entire field value, keeping it as a single token.  -->
  <dynamicField name="*_s_lower" type="lowercase"  indexed="true"  stored="true"/>
  <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer name="keyword"/>
      <filter name="lowercase" />
    </analyzer>
  </fieldType>

  <!--
    Example of using PathHierarchyTokenizerFactory at index time, so
    queries for paths match documents at that path, or in descendent paths
  -->
  <dynamicField name="*_descendent_path" type="descendent_path"  indexed="true"  stored="true"/>
  <fieldType name="descendent_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer name="pathHierarchy" delimiter="/" />
    </analyzer>
    <analyzer type="query">
      <tokenizer name="keyword" />
    </analyzer>
  </fieldType>

  <!--
    Example of using PathHierarchyTokenizerFactory at query time, so
    queries for paths match documents at that path, or in ancestor paths
  -->
  <dynamicField name="*_ancestor_path" type="ancestor_path"  indexed="true"  stored="true"/>
  <fieldType name="ancestor_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer name="keyword" />
    </analyzer>
    <analyzer type="query">
      <tokenizer name="pathHierarchy" delimiter="/" />
    </analyzer>
  </fieldType>

  <!-- This point type indexes the coordinates as separate fields (subFields)
    If subFieldType is defined, it references a type, and a dynamic field
    definition is created matching *___<typename>.  Alternately, if
    subFieldSuffix is defined, that is used to create the subFields.
    Example: if subFieldType="double", then the coordinates would be
      indexed in fields myloc_0___double,myloc_1___double.
    Example: if subFieldSuffix="_d" then the coordinates would be indexed
      in fields myloc_0_d,myloc_1_d
    The subFields are an implementation detail of the fieldType, and end
    users normally should not need to know about them.
   -->
  <dynamicField name="*_point" type="point"  indexed="true"  stored="true"/>
  <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

  <!-- A specialized field for geospatial search filters and distance sorting. -->
  <fieldType name="location" class="solr.LatLonPointSpatialField" docValues="true"/>

  <!-- A geospatial field type that supports multiValued and polygon shapes.
    For more information about this and other spatial fields see:
    https://solr.apache.org/guide/solr/latest/query-guide/spatial-search.html
  -->
  <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
             geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers" />

  <!-- Payloaded field types -->
  <fieldType name="delimited_payloads_float" stored="false" indexed="true" class="solr.TextField">
    <analyzer>
      <tokenizer name="whitespace"/>
      <filter name="delimitedPayload" encoder="float"/>
    </analyzer>
  </fieldType>
  <fieldType name="delimited_payloads_int" stored="false" indexed="true" class="solr.TextField">
    <analyzer>
      <tokenizer name="whitespace"/>
      <filter name="delimitedPayload" encoder="integer"/>
    </analyzer>
  </fieldType>
  <fieldType name="delimited_payloads_string" stored="false" indexed="true" class="solr.TextField">
    <analyzer>
      <tokenizer name="whitespace"/>
      <filter name="delimitedPayload" encoder="identity"/>
    </analyzer>
  </fieldType>

  <!-- some examples for different languages (generally ordered by ISO code) -->

  <!-- CJK bigram (see text_ja for a Japanese configuration using morphological analysis) -->
  <!-- TODO: how does this compare to Franklin CJK customizations? -->
  <dynamicField name="*_txt_cjk" type="text_cjk"  indexed="true"  stored="true"/>
  <fieldType name="text_cjk" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer name="standard"/>
      <!-- normalize width before bigram, as e.g. half-width dakuten combine  -->
      <filter name="CJKWidth"/>
      <!-- for any non-CJK -->
      <filter name="lowercase"/>
      <filter name="CJKBigram"/>
    </analyzer>
  </fieldType>

  <!-- Japanese using morphological analysis (see text_cjk for a configuration using bigramming)

       NOTE: If you want to optimize search for precision, use default operator AND in your request
       handler config (q.op) Use OR if you would like to optimize for recall (default).
  -->
  <dynamicField name="*_txt_ja" type="text_ja"  indexed="true"  stored="true"/>
  <fieldType name="text_ja" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="false">
    <analyzer>
      <!-- Kuromoji Japanese morphological analyzer/tokenizer (JapaneseTokenizer)

         Kuromoji has a search mode (default) that does segmentation useful for search.  A heuristic
         is used to segment compounds into its parts and the compound itself is kept as synonym.

         Valid values for attribute mode are:
            normal: regular segmentation
            search: segmentation useful for search with synonyms compounds (default)
          extended: same as search mode, but unigrams unknown words (experimental)

         For some applications it might be good to use search mode for indexing and normal mode for
         queries to reduce recall and prevent parts of compounds from being matched and highlighted.
         Use <analyzer type="index"> and <analyzer type="query"> for this and mode normal in query.

         Kuromoji also has a convenient user dictionary feature that allows overriding the statistical
         model with your own entries for segmentation, part-of-speech tags and readings without a need
         to specify weights.  Notice that user dictionaries have not been subject to extensive testing.

         User dictionary attributes are:
                   userDictionary: user dictionary filename
           userDictionaryEncoding: user dictionary encoding (default is UTF-8)

         See lang/userdict_ja.txt for a sample user dictionary file.

         Punctuation characters are discarded by default.  Use discardPunctuation="false" to keep them.
      -->
      <tokenizer name="japanese" mode="search"/>
      <!--<tokenizer name="japanese" mode="search" userDictionary="lang/userdict_ja.txt"/>-->
      <!-- Reduces inflected verbs and adjectives to their base/dictionary forms (辞書形) -->
      <filter name="japaneseBaseForm"/>
      <!-- Removes tokens with certain part-of-speech tags -->
<!--      <filter name="japanesePartOfSpeechStop" tags="lang/stoptags_ja.txt" />-->
      <!-- Normalizes full-width romaji to half-width and half-width kana to full-width (Unicode NFKC subset) -->
      <filter name="cjkWidth"/>
      <!-- Removes common tokens typically not useful for search, but have a negative effect on ranking -->
<!--      <filter name="stop" ignoreCase="true" words="lang/stopwords_ja.txt" />-->
      <!-- Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) -->
      <filter name="japaneseKatakanaStem" minimumLength="4"/>
      <!-- Lower-cases romaji characters -->
      <filter name="lowercase"/>
    </analyzer>
  </fieldType>

  <!-- Korean morphological analysis -->
  <dynamicField name="*_txt_ko" type="text_ko"  indexed="true"  stored="true"/>
  <fieldType name="text_ko" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <!-- Nori Korean morphological analyzer/tokenizer (KoreanTokenizer)
        The Korean (nori) analyzer integrates Lucene nori analysis module into Solr.
        It uses the mecab-ko-dic dictionary to perform morphological analysis of Korean texts.

        This dictionary was built with MeCab, it defines a format for the features adapted
        for the Korean language.

        Nori also has a convenient user dictionary feature that allows overriding the statistical
        model with your own entries for segmentation, part-of-speech tags and readings without a need
        to specify weights. Notice that user dictionaries have not been subject to extensive testing.

        The tokenizer supports multiple schema attributes:
          * userDictionary: User dictionary path.
          * userDictionaryEncoding: User dictionary encoding.
          * decompoundMode: Decompound mode. Either 'none', 'discard', 'mixed'. Default is 'discard'.
          * outputUnknownUnigrams: If true outputs unigrams for unknown words.
      -->
      <tokenizer name="korean" decompoundMode="discard" outputUnknownUnigrams="false"/>
      <!-- Removes some part of speech stuff like EOMI (Pos.E), you can add a parameter 'tags',
        listing the tags to remove. By default it removes:
        E, IC, J, MAG, MAJ, MM, SP, SSC, SSO, SC, SE, XPN, XSA, XSN, XSV, UNA, NA, VSV
        This is basically an equivalent to stemming.
      -->
      <filter name="koreanPartOfSpeechStop" />
      <!-- Replaces term text with the Hangul transcription of Hanja characters, if applicable: -->
      <filter name="koreanReadingForm" />
      <filter name="lowercase" />
    </analyzer>
  </fieldType>

  <!-- Similarity is the scoring routine for each document vs. a query.
     A custom Similarity or SimilarityFactory may be specified here, but
     the default is fine for most applications.
     For more info: https://solr.apache.org/guide/solr/latest/indexing-guide/schema-elements.html#similarity
  -->
  <!--
   <similarity class="com.example.solr.CustomSimilarityFactory">
     <str name="paramkey">param value</str>
   </similarity>
  -->

</schema>
